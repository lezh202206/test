// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/NAME/main.gotemplate (193B)
// handlers/handlers.gotemplate (62B)
// handlers/hooks.gotemplate (62B)
// handlers/middlewares.gotemplate (75B)
// svc/client/grpc/client.gotemplate (3.862kB)
// svc/client/http/client.gotemplate (105B)
// svc/endpoints.gotemplate (4.191kB)
// svc/server/run.gotemplate (1.721kB)
// svc/transport_grpc.gotemplate (2.429kB)
// svc/transport_http/permissions.gotemplate (72B)
// svc/transport_http/transport_http.gotemplate (72B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdNameMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcc\x3d\x6e\x83\x40\x10\x47\xf1\x9a\x39\xc5\x5f\xae\xa0\xc8\xce\x21\xe2\x14\x6e\xe2\xc8\xe1\x02\x9b\xf5\x18\x8f\x82\x17\x6b\xf6\x03\x45\x88\xbb\x47\x86\xfa\xfd\xf4\x98\xf1\x3e\x5d\x05\x83\x44\x31\x9f\xe5\x8a\x9f\x3f\x64\x2b\x29\x39\x1c\xcf\xf8\x3c\xf7\xf8\x38\x9e\x7a\x47\xcc\xb8\x88\x95\x18\x35\x0e\x3b\xc0\xac\xe3\x88\xa9\x8a\xcd\xa6\x59\x90\xef\x9a\x70\xd3\x51\x1c\xd1\xd3\x87\x5f\x3f\x08\x1e\x5e\x23\x91\x3e\x9e\x93\x65\xb4\xd4\x30\xa3\x7f\xb1\x6f\xb1\xaa\x41\xa8\x39\x2c\x8b\x3b\x6d\xf9\xcb\xe7\x3b\xde\xd6\x15\x9c\x6a\xe0\x24\x56\xc5\x0e\xd4\x11\xdd\x4a\x0c\xdb\xa8\xed\xb0\x50\xb3\x17\x77\x29\xb1\xed\x68\xa5\xff\x00\x00\x00\xff\xff\x04\x22\x2b\x73\xc1\x00\x00\x00")

func cmdNameMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMainGotemplate,
		"cmd/NAME/main.gotemplate",
	)
}

func cmdNameMainGotemplate() (*asset, error) {
	bytes, err := cmdNameMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/NAME/main.gotemplate", size: 193, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x79, 0x8d, 0x47, 0xe, 0x3e, 0x47, 0x9, 0x45, 0x96, 0xa9, 0x5e, 0x9c, 0x89, 0x80, 0xd1, 0x51, 0x55, 0x10, 0x67, 0xab, 0xc2, 0x10, 0xbf, 0xa2, 0xca, 0x70, 0xcf, 0x40, 0x93, 0x75, 0xc1}}
	return a, nil
}

var _handlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\x8c\x03\xef\x57\x73\xc0\x37\x51\x3a\xd5\xe8\xd0\x02\x4a\x3c\xc6\x32\x03\x00\x00\xff\xff\xd6\x21\xab\x2e\x3e\x00\x00\x00")

func handlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHandlersGotemplate,
		"handlers/handlers.gotemplate",
	)
}

func handlersHandlersGotemplate() (*asset, error) {
	bytes, err := handlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/handlers.gotemplate", size: 62, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xcb, 0xd5, 0x72, 0x80, 0xc6, 0xf9, 0x82, 0x4b, 0xe0, 0x8b, 0x90, 0xb8, 0x9b, 0xbc, 0x5d, 0x8d, 0x12, 0xd4, 0x8e, 0x54, 0xf6, 0x72, 0xcb, 0xef, 0xf5, 0x12, 0xd0, 0xe1, 0xb8, 0x41, 0xc8}}
	return a, nil
}

var _handlersHooksGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\x8c\x03\xef\x57\x73\xc0\x37\x51\x3a\xd5\xe8\xd0\x02\x4a\x3c\xc6\x32\x03\x00\x00\xff\xff\xd6\x21\xab\x2e\x3e\x00\x00\x00")

func handlersHooksGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHooksGotemplate,
		"handlers/hooks.gotemplate",
	)
}

func handlersHooksGotemplate() (*asset, error) {
	bytes, err := handlersHooksGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/hooks.gotemplate", size: 62, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xcb, 0xd5, 0x72, 0x80, 0xc6, 0xf9, 0x82, 0x4b, 0xe0, 0x8b, 0x90, 0xb8, 0x9b, 0xbc, 0x5d, 0x8d, 0x12, 0xd4, 0x8e, 0x54, 0xf6, 0x72, 0xcb, 0xef, 0xf5, 0x12, 0xd0, 0xe1, 0xb8, 0x41, 0xc8}}
	return a, nil
}

var _handlersMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0e\x02\x21\x0c\x05\xd0\xbd\xa7\xe8\x9a\x44\x7b\x18\x4f\x40\xec\xb7\x12\x81\x4e\xda\x4e\x66\x41\xb8\xfb\xbc\xb5\xb8\xd0\x1b\x20\xb5\x67\xfa\x19\xc1\x8a\xa9\xf6\x6f\xc9\xbf\x3a\xa5\xc3\x83\x13\xe3\xe8\x35\x11\x3c\x9a\x48\xc7\x55\x1d\xf1\x52\xa3\xaf\x39\x7d\x4c\x40\x85\xf7\x7e\xdc\x01\x00\x00\xff\xff\xcf\x9e\xe9\x81\x4b\x00\x00\x00")

func handlersMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersMiddlewaresGotemplate,
		"handlers/middlewares.gotemplate",
	)
}

func handlersMiddlewaresGotemplate() (*asset, error) {
	bytes, err := handlersMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/middlewares.gotemplate", size: 75, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xfe, 0x9d, 0x1a, 0xaf, 0x47, 0xe8, 0x97, 0x82, 0x24, 0x50, 0x17, 0xb4, 0x49, 0x73, 0x3b, 0x68, 0xb7, 0xe5, 0x3a, 0x3d, 0xb6, 0x15, 0x9d, 0xb1, 0x8f, 0xc4, 0x27, 0xaf, 0xa7, 0x3c, 0xc1}}
	return a, nil
}

var _svcClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xc1\x6e\x1b\xb7\x16\x5d\x0f\xbf\xe2\x46\x30\x82\x19\x43\xa6\xf6\x06\xb4\x89\xec\x67\x04\x2f\x71\x0c\xc7\xef\xbd\xc5\x43\x11\xd0\x33\x77\x46\xac\xc7\xe4\x84\x43\xc9\x56\x07\xb3\x28\xd0\x22\x9b\x14\xdd\x64\x95\x55\x37\x05\xba\xea\x17\xb4\xe8\xcf\x34\x0d\xf2\x17\xc5\x25\x39\xd2\x48\x96\x65\xa3\x01\x92\x68\xc8\xc3\xc3\xcb\x7b\x0e\xef\xe5\x68\x04\x13\x9d\x21\x14\xa8\xd0\x08\x8b\x19\x5c\x2e\xc0\x9a\x59\x5d\x73\x38\x7a\x05\xa7\xaf\x2e\xe0\xf8\xe8\xf9\x05\x67\xa3\x11\x9c\xa3\x99\x29\x25\x55\xe1\x01\x70\x23\xcb\x12\xf4\x1c\xcd\x8d\x91\x16\xc1\x4e\x65\x0d\xb9\x2c\x91\x33\x42\x9f\x89\xf4\x4a\x14\x08\x85\xa9\x52\xa8\x8c\x9e\xcb\x0c\x6b\x10\x50\x9c\x9f\x4d\x20\x2d\x25\x2a\x0b\xb9\x36\x60\xa7\x08\x4d\xc3\x5f\xa3\x99\xcb\x14\xf9\xa9\xb8\xc6\xb6\x85\x3a\x7c\xb2\xaa\x47\xc3\x98\xbc\xae\xb4\xb1\x10\xb3\x68\x90\x6a\x65\xf1\xd6\x0e\x58\x34\x28\xa4\x9d\xce\x2e\x79\xaa\xaf\x47\xd5\x55\x31\x42\x63\xb4\xa9\xdd\x84\xd6\x45\x89\xbc\xd0\xa5\x50\x05\xd7\xa6\x18\x11\x0d\xcd\xd4\x0b\x95\x0e\x98\x5f\x8b\xe8\x96\x7e\x33\x9d\x5d\x0a\x8d\x07\x85\x1e\x7d\xad\x4d\x26\xd4\x28\xd5\x2a\x97\xc5\xe0\x01\x54\xa1\x0f\xae\xa4\x1d\x59\x23\x54\x4d\xd1\x3d\x88\x37\x55\x3a\xf2\x09\xd8\x08\x3e\x30\xd1\x5f\x54\x59\xa5\xa5\x43\x10\x7e\x49\x0e\xf7\xe0\x97\x80\x70\x42\x16\x8d\x46\x70\x41\x8a\x84\xc4\xb2\x68\xd0\x34\xfc\xb9\xcb\xdf\x99\xb0\x53\x38\x68\x5b\x18\xd5\x73\xca\x46\x75\x09\x34\x79\xf6\x6c\x7d\x7a\xc0\x12\xc6\xe6\xc2\x40\x86\xb9\x98\x95\x76\xa2\x95\x82\x7d\xe2\xe7\x13\x17\x3e\x0d\x38\x40\xaa\x95\x7a\x39\xb3\x78\x0b\x94\x57\xee\x7e\x32\x66\x17\x15\xc2\x89\xa9\x52\x8f\x86\xda\x9a\x59\x6a\xa1\x61\x11\xe1\x01\xee\x72\x45\x24\x3b\x1a\xa8\x2e\xf9\x1d\x4b\xbc\x76\x53\x2c\x42\x63\x00\x00\x9c\xc8\xac\x75\x56\x3b\xc5\x1b\x30\x68\x67\x46\xd5\x20\x54\xe7\x1d\xb8\x14\xe9\x95\x37\xf4\xba\xeb\x68\x77\x4c\xad\xd4\x8a\xc3\x73\x0b\xb2\x26\x0f\x12\x8f\xc1\xba\xd2\xaa\x96\x97\xb2\x94\x76\x01\x3a\x77\xe6\x4c\x45\x59\xa2\x01\xab\x21\x93\xa2\x1c\x82\x50\x19\x94\xc2\xa2\x81\xb4\xd4\x35\x0e\x3d\x68\xc5\xc9\xf2\x99\x4a\x29\xa6\x38\xb5\xb7\x10\x6c\xca\x27\xfe\xff\x21\xe8\x8a\x50\x35\x70\x1e\x4e\xfe\xca\x0d\x24\xb0\xdf\x4b\x55\xc3\xa2\x02\x0e\xc7\xf0\x74\x35\xd6\xb4\x2c\xea\x72\x7d\x37\x73\x94\x12\x9a\xa5\xec\xf8\xd4\xb0\x48\xe6\xe0\x1d\xcc\x4f\x84\xc5\x1b\xb1\x88\x13\x4e\x7c\xff\x46\xac\x44\x29\xe7\x48\xdb\x90\x4f\xfe\xfc\xfd\x8f\xcf\x1f\x7e\xf9\xf4\xe3\xfb\x2f\xef\x7e\xf8\xf2\xe1\x5b\x16\xd1\xd2\xbe\xe8\xe3\x31\x28\x59\x3a\x78\xb4\xd4\x9a\xbf\xd0\xe9\x55\x9c\xd0\x58\x86\x39\xf6\x5c\xc0\xff\xa3\xca\xe5\xdc\x0e\x2a\xc7\x35\x74\x31\x8f\x83\x38\x3c\xe4\x6d\x38\x68\x9a\x0b\xfd\x42\xdf\xa0\x81\x0d\x23\x0c\x1c\x2d\xf1\xd2\xc2\x27\x7d\xbe\xa8\xe0\x9e\x0c\x8d\xf1\x03\xde\x16\x50\xb8\xaf\xd6\xfd\xbb\x16\x8d\x0b\x9a\x85\xb9\x96\x31\x1f\xd3\xb8\x87\x61\x51\x8b\x65\xed\x73\xf5\xcf\xe3\xdd\x12\xed\x46\xac\xbd\x48\x5b\x16\xb5\x4e\xd1\x82\xa7\xbd\x28\x83\xfe\x69\xd8\x7a\xe2\xb4\x65\x11\x15\xd1\x37\x43\xc8\xc9\x2f\x46\xa8\x02\x97\x16\xa3\x6d\x68\x8f\xc3\x31\xe4\xf1\xd3\x34\x7d\x38\x10\x6d\x6a\xfe\x3f\x23\xaa\x18\x8d\x19\xc2\x20\x15\x4a\x69\x0b\xa2\xaa\xca\x45\x60\x1d\x24\x2e\xb2\xee\xcf\x66\xd4\x2c\x4a\x7b\xa6\xae\x0f\xc7\xcb\xc2\xc4\x8f\x7c\x4e\x57\x8e\x0e\x18\xb2\x09\x99\xf0\xb7\x9f\x3e\x7d\xff\xf3\x5f\xef\xdf\x7d\xfa\xf5\xe3\xe7\x8f\xdf\x85\x7b\xf3\x5f\x51\xce\x70\x83\x74\x2c\xaa\x0a\x55\x16\xaf\x0d\x0e\xd7\xca\x64\xb8\x1a\xcf\x30\xd7\x06\xe3\xde\x70\x8f\xb5\xbe\xd0\x27\xe7\x67\x93\x97\x68\x45\x26\xac\x88\xd3\x94\x4f\x51\x64\x68\xea\x24\x49\x18\x8b\x9a\xe6\x00\x6e\xa4\x9d\xc2\x9e\x45\x4a\x21\x6f\xc9\x23\xab\xd1\xea\xaa\x20\x81\x69\x6a\xcf\x22\x0f\xfd\xce\x6b\x4e\x69\x25\xa4\xd7\x63\x4f\x76\xa0\xce\x19\x2f\xd1\x4e\x75\x56\x7b\xa0\x93\x75\x65\x9f\x3d\x19\x8c\x73\x1c\x7a\x00\x74\xcd\x80\x77\x23\x6e\x55\xb0\xfc\xae\x85\x63\x58\xcf\xca\x29\xde\xf8\xc4\xc4\x7e\xad\x37\x74\xf8\x3d\x68\x9a\xee\x4c\x6d\xcb\x9b\xa6\x1f\x6f\x70\x72\x1f\x2a\x37\x07\x8f\x55\xaa\x33\xa4\x94\xf6\x66\xcf\xf1\xed\x0c\x6b\xdb\x61\x8e\x70\x2b\xc6\x95\x5d\xec\x40\xae\xfa\x9f\x68\x97\xdc\x3d\xc9\xbb\xe9\x8b\x45\xd5\x05\xd2\xb4\x1d\x76\xcd\x03\x9c\xf3\x30\x9e\x2c\x53\xe5\x8b\x50\x14\x14\x41\x95\x05\x15\xc3\xaf\xee\x07\x8b\x0a\x1e\x9a\xcf\x18\xa0\x9e\xa7\x4b\x82\xba\x21\x54\x5f\xc8\x4d\x15\xa9\x57\x3a\xce\x3b\x02\x1c\xd2\x15\xd9\x21\xd0\x70\x15\x00\x45\xb8\xbc\x4c\x2d\xf3\x4d\x24\x2e\xfa\x5d\x21\x01\xdf\x03\xe3\x64\x47\x83\xa4\x2b\xdd\xf1\x84\x13\xdd\x4b\x77\x6c\x88\xcb\x5d\xfb\xb5\x65\x54\x91\xee\x5b\x33\xa1\x9e\x17\x27\x84\x97\x39\x3c\x79\x44\x83\x91\x79\x57\xc7\xd6\x8b\x0e\x0d\xf1\x40\xd7\x95\x0f\xdf\xcf\xc9\x1f\x10\x3a\xa1\x77\x0c\xdb\xad\x40\xdb\xd2\xb2\x9d\xe6\xa2\x36\x2f\x60\xfd\x99\xc4\xfd\x8a\x0e\xf2\x2f\x3a\xaf\x9d\x0a\xf7\x42\x98\xa3\xb1\x35\x08\xe2\x75\x6f\x87\x2d\x2a\x82\x41\xaa\x8b\x56\x83\x80\x59\x8d\xe6\x20\xd3\xd7\x42\xaa\x7b\xa0\x7e\x0f\x0e\x67\x46\x5e\x0b\x23\xcb\x05\xad\xc9\x67\x25\x48\x05\xa2\xeb\x26\x3e\xe7\x3b\x0f\x12\xbf\xb9\xfb\xa6\xa0\xc3\x9c\xbb\x60\xa4\xb2\x68\x72\x91\x62\xd3\x26\x10\xf7\xbe\x86\x5e\xe7\xc4\x0b\x4d\xd0\xc3\xf1\x6a\x1d\x8f\xf7\x1f\xbe\x75\xc9\xd2\x22\x8e\x60\x48\x62\xb2\x96\x2d\xaf\xd0\x86\x72\xbe\x1e\x3c\x4a\xb9\x5d\xa5\x63\xab\x70\x7e\x41\x40\xdc\xa7\xdb\xc3\x9a\xf8\x0d\x9c\x80\x3b\x44\x76\xa8\x47\x09\xb7\xeb\x1c\xdb\x74\xeb\x22\x78\xa4\x6a\x6f\x5d\x8b\x0f\xf1\x6c\x51\xcc\x4d\xdc\x23\xd8\xdb\x3b\x72\xf9\xf7\x79\xff\x2d\xd1\x7b\xa1\x87\x4e\x08\xff\xff\xaa\xb6\x46\xaa\x22\xdc\xcc\x7e\xe3\xf6\xc2\xd0\xb9\xdd\x97\x13\xe0\x5a\x67\x32\x97\x58\xfb\x37\xf1\xf2\xb9\x4d\xef\x14\xb7\xdb\xda\x7a\x5a\x1a\xef\xf7\x03\x48\xba\xb7\xab\xcb\xe6\xc4\xde\x76\x8d\xfa\x35\xf5\xfb\x2b\x5c\xb8\x67\xb3\x8f\x28\x59\x27\x5b\xd5\x2f\x47\xab\x61\x1b\xb1\x2b\x3d\xba\x6b\xf3\x30\x06\xa2\x64\xcb\xb7\x17\x25\xc8\x15\xa1\xbf\x03\x00\x00\xff\xff\xda\x87\x8e\xd9\x16\x0f\x00\x00")

func svcClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcClientGotemplate,
		"svc/client/grpc/client.gotemplate",
	)
}

func svcClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/client.gotemplate", size: 3862, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0xf2, 0xda, 0x12, 0xb0, 0xf9, 0x5c, 0x33, 0x28, 0x46, 0x7, 0xe8, 0xf3, 0xa2, 0x55, 0xb2, 0x4b, 0x5e, 0xe4, 0xe5, 0xa5, 0xa8, 0xb2, 0x40, 0x4d, 0x6d, 0x8a, 0xfb, 0x3a, 0x43, 0x10, 0xab}}
	return a, nil
}

var _svcClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x10\x34\x29\x91\xc8\x02\x56\xf8\x98\x88\xc3\x67\x9d\x3f\x95\xe5\xdd\x69\x18\xe0\x8d\xa1\xab\xdc\x01\x29\x7e\x61\x7c\x7b\xd7\x82\x5a\xfc\x7d\x52\x5f\x64\x63\xe4\xda\x9b\x07\x95\xf8\x34\xcb\x44\x2a\x2e\x4f\x0f\x39\xfc\x01\x59\x75\xce\x65\x8c\x23\x9b\x49\xda\xf6\xfd\xb6\xc1\x1a\x22\x5d\xed\x44\xe5\xfe\x27\x92\xe6\x5c\x7e\x01\x00\x00\xff\xff\x0b\x3c\x4c\x9e\x69\x00\x00\x00")

func svcClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientHttpClientGotemplate,
		"svc/client/http/client.gotemplate",
	)
}

func svcClientHttpClientGotemplate() (*asset, error) {
	bytes, err := svcClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/http/client.gotemplate", size: 105, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xf0, 0x36, 0xf9, 0x16, 0xea, 0x9d, 0x4e, 0x73, 0x64, 0xc5, 0xad, 0xb3, 0x1b, 0x4, 0xe, 0xd8, 0xc8, 0x1e, 0xf7, 0x7a, 0x39, 0x40, 0x4c, 0xb2, 0x12, 0x83, 0x35, 0xca, 0x82, 0x6f, 0xd0}}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5d\x6f\xdc\xb6\x12\x7d\x96\x7e\xc5\x44\xf0\x85\x77\x03\x99\x7e\x4f\xe0\x87\x7b\x13\xdf\xd6\x40\xf3\x81\xd8\x45\x1f\x82\x20\xe0\x4a\xa3\x15\x61\x8a\x64\x48\x6a\xd7\x5b\x41\xff\xbd\x18\x52\xd2\x6a\xb3\x4a\x9a\xf6\xb1\xe8\x43\xb0\x31\x3f\x0e\xcf\x9c\x33\x33\xa4\xae\xaf\xe1\x95\x2e\x11\xb6\xa8\xd0\x72\x8f\x25\x6c\x0e\xe0\x6d\xeb\x1c\x83\xd7\xef\xe0\xed\xbb\x07\xb8\x7d\x7d\xf7\xc0\xd2\xeb\x6b\xf8\x80\xb6\x55\x4a\xa8\x6d\x5c\x00\x7b\x21\x25\xe8\x1d\xda\xbd\x15\x1e\xc1\xd7\xc2\x41\x25\x24\xb2\x34\x35\xbc\x78\xe4\x5b\x04\xb7\x2b\x52\xda\xfa\x30\xce\x41\xa1\x95\xe7\x42\x39\x68\xd0\xd7\xba\x74\xe0\x35\x34\xfc\x11\x41\xa8\x52\xec\x44\xd9\x72\x09\xa8\x4a\xa3\x85\xf2\x0e\x2a\xab\x1b\x70\x68\x77\xa2\x40\x97\x13\x92\xc5\x2f\x2d\x3a\x0f\x5c\x95\x60\xd1\x19\xad\x1c\x82\x3f\x18\x0c\x48\xb4\x94\x98\x68\x87\x47\x94\x1c\xb8\x83\x3d\x4a\x49\xbf\xa8\x0a\x5d\xa2\x75\x04\x40\x78\x25\x0e\x7f\x57\xda\x0e\x1b\x03\x5a\x1e\x06\x38\x45\x58\x81\x6e\x2d\xb8\xd6\x18\x6d\x49\x21\x6f\xb9\x72\xf4\x7f\x3a\x4e\x70\x29\x7e\xe7\x5e\x68\x45\x68\x95\xb6\x0d\xf7\x8e\xa5\xa9\x68\xc2\x8a\x55\x9a\x64\x55\xe3\xb3\x34\xc9\x28\x72\x7c\xf2\x59\x9a\x26\xd9\x56\xf8\xba\xdd\xb0\x42\x37\xd7\x5b\x7d\xf5\x28\xfc\x35\xfd\x1b\x19\xd3\x12\xb3\x81\xac\xeb\xd8\xfb\xff\xdd\x05\xa0\xf7\xdc\xd7\x70\xd5\xf7\x59\xba\x0e\x82\xde\x4e\x12\x15\x5a\x4a\x2c\xbc\x1b\xb9\xfa\x7a\x16\x3a\xf8\x9a\x7b\x28\x74\x63\x28\x30\xae\x80\x97\xe5\xa8\x27\x83\x3b\x7f\xe9\x08\xac\x41\xae\x3c\xc9\xb7\x41\x68\x1d\x96\xa4\x13\x87\x1a\xa5\x41\x0b\xce\xdb\xb6\xf0\x39\x4d\x0f\x47\x2d\x9f\x24\x94\xd7\xc0\x09\xce\x09\xb5\x95\x08\x86\x5b\xde\xa0\x47\x4b\xc9\x43\xe3\x77\x0a\x78\x74\xc8\xe6\x20\xfc\xa5\xa3\xc3\xaa\x56\x06\xa5\xab\x56\x15\xa4\xe2\x40\x59\x21\x09\xad\x41\x9b\x90\x96\xa0\x69\xaf\x41\x7b\x35\x1e\x48\x80\x1b\xee\x84\x63\xf0\x7f\x6d\x01\x9f\x78\x63\x24\xe6\x70\xd0\x2d\x34\x62\x5b\x7b\x30\xdc\x91\xcb\x33\xa9\x88\xe0\x74\x50\x3c\xc7\x58\x5d\xb6\x05\x06\x19\xb8\x82\xda\x7b\xc3\x7e\xe6\xaa\x94\xc4\x71\x2f\x7c\x0d\xc8\x8b\x7a\x48\x56\x58\x8d\xa7\xaf\x61\x2f\x2c\x96\xd0\x9a\x08\xea\x0c\x16\xa2\x12\x05\x18\xee\x6b\x06\xab\xbb\xc0\x4f\x38\xc2\xdf\xf0\x8d\x3c\x00\x87\x46\x38\x1f\x13\x1d\x4a\x74\x62\xab\x68\xab\x50\x3b\xfd\x88\x41\xca\xfb\x68\xcb\x54\x18\x81\x22\x9e\x9a\x1d\xcd\x20\x88\x51\x49\xb6\x9e\xab\x5b\x48\x81\xca\x9f\xaa\x3b\x33\xee\x58\x63\xf2\x40\x95\x18\xe1\xb0\xfc\x9e\x8d\x54\x0d\x51\x2b\x41\x0a\x37\x18\xd3\xea\xc8\x57\x28\x8f\xb6\xe2\x94\x50\xcb\x4e\x10\xd8\x74\xd8\x72\x9d\xb7\x2e\xb6\x95\xa1\xb0\xae\x83\x0f\x6f\x71\xff\x6a\x88\xa7\xd0\xcd\x46\xa8\xa0\x53\x33\x50\x9c\x19\x9b\x0f\xdd\xc0\xb7\x56\x81\x08\x99\x4c\x04\x0b\x2e\x25\xda\x98\xcc\x03\x59\x96\x86\x70\xce\x04\xed\xd2\xae\xb3\x5c\x6d\x11\x2e\x04\xbc\xb8\x01\x36\xae\x7f\x13\xcd\xe8\xfb\x34\xe9\xba\x0b\xc1\xde\xf2\x06\xfb\x7e\xdc\x0f\x00\x53\x10\x6c\x1c\x4c\xbb\xee\x8a\x46\xfb\x3e\xed\x4f\x6b\xf5\x07\x0e\xa1\xec\x84\xd5\x8c\xe1\x1a\x66\xe7\xae\x0a\xff\x04\x43\x1f\x61\xaf\xe2\x6f\x4e\xd9\xf0\xdc\x6c\x58\xd7\xfd\xa4\x69\x19\x5c\x08\xf6\x21\x76\xc9\x87\x83\xc1\x61\xeb\x1a\x56\xe7\x8b\x62\xfb\x9c\xad\xca\x01\xad\xd5\x76\x0d\x5d\x9a\x24\x63\x7b\x0d\x83\x44\x18\xd9\x82\x06\xc4\x89\x38\xac\xd3\x24\x11\x55\x58\xfa\xec\x06\x94\x90\x01\x23\x19\x5c\x51\x42\x06\x98\x34\x49\xfa\x74\x1a\x1d\x4f\x60\x3f\xc2\x6d\x9d\x13\x4a\x9a\xf4\x69\xd7\x45\x79\x49\xdc\x37\x54\x52\x73\x85\x43\xd1\x5e\x78\x0c\x0a\x47\xdf\xe6\xa2\x5f\x78\x5c\xd2\x3d\x0a\x4f\x60\x4b\x21\x3a\x08\xf4\xe6\x7b\xe3\x8a\xfb\x50\x83\xeb\xf3\x24\x38\x09\x9e\xb0\x97\xad\x1b\x6f\xb3\xa9\x86\x3a\x32\x6a\xba\xd7\x66\xc3\xd1\x84\x99\x3b\x84\xfe\x85\x22\x1a\x30\x96\x34\x3c\x4b\x82\xb0\x6f\x37\x19\xea\xd8\x57\xc9\x15\x18\xc5\x55\x0b\x5e\x2e\xb9\x19\xfd\x9c\x66\x76\x83\x49\x71\x38\xa8\x1f\xbd\x9a\x7b\xf6\x9b\xe5\xe6\xbf\x52\xde\x3e\x15\x68\x3c\xec\x2d\x37\x2e\xb6\xd9\x49\xbd\x4a\xa0\x2c\xe9\x8e\x19\xea\xf3\x58\xb0\xc1\xde\xd0\x9f\x16\x2e\x4e\xf6\x46\x94\xa5\xc4\x3d\xb7\x18\x5e\x2c\xbf\xba\xf1\x59\x42\x77\xb9\x31\xf2\x40\x6d\x86\x5a\xa7\x27\xf0\x66\x5a\x1d\xee\x06\xdc\xa1\x3d\x4c\x56\x52\x59\x51\x17\x19\x6f\x4b\xc2\x7b\x67\xe8\xe6\xa0\xee\x99\xcf\x9a\x57\xc1\x15\xdd\x9c\x74\xdf\x60\x49\xdb\x36\x07\x50\xe4\x41\xbc\x51\xf1\xa9\x90\x6d\x89\x65\x7c\xcc\x6c\x90\x28\x50\xcc\x06\x4b\x76\xa6\xc6\xea\xc8\x29\x87\xec\xde\x73\xdf\xba\x2c\x87\xec\xbd\x50\xdb\x6c\x9d\x8e\xed\xe1\xf9\xac\x3f\x7c\x6b\x3f\x2c\xa8\x92\x1f\xd9\x30\xc6\x9c\xb7\x42\x6d\x43\x3a\x09\x35\x0c\xbf\xb8\x81\x86\x9b\x8f\x71\xea\x53\x94\xbf\xeb\xc9\x7e\x6a\x6b\x7f\xd6\xbe\x92\x24\x9b\x65\x54\xf6\x02\xba\x3e\x1f\xb6\x46\xfb\x93\x3e\x4d\x13\x72\xe3\x33\x51\x09\xe9\x1b\x20\x27\x5a\x5d\x6c\x23\x9f\x73\xd0\x8f\x34\x3d\x12\xfb\x88\x4f\x9f\x5e\xc2\x33\xfd\x18\x53\xd1\x70\x25\x8a\x55\xd5\x78\x76\x6f\xac\x50\xbe\x5a\x65\xb7\x23\xc4\xe4\xe0\xe5\x7f\xdc\x25\x94\x1a\x1d\x28\xed\x01\x9f\x84\xf3\x2f\xc1\x21\xce\x8d\x9f\x72\xc7\xb1\xad\xce\x88\xd4\x7a\x3d\x34\xa9\x12\x25\x7a\x5c\x8d\x0c\xc2\xdc\x31\x00\xa1\x8a\x23\xfd\x49\xbe\x1f\x17\x4a\x54\x01\xe2\xe6\x06\x4e\x24\x1b\x2a\x6d\xb1\xd5\xc2\xcd\x8c\xf9\x6a\x71\xc9\x7a\x2c\xbd\x13\xc9\x63\xd9\xfd\xc2\x37\x28\xb1\x3c\x66\x43\x7c\xc1\x6f\xd1\x8f\xb9\x3b\x7f\xd1\xc5\x14\xde\xd7\xa8\xa6\x59\x3d\x4b\xd7\x01\x2c\x66\x5d\x1e\xab\x6c\x28\x84\x36\x2e\x86\xf8\x59\xc0\xe3\xb7\x85\x28\xe8\x61\x63\x45\x11\x5f\x9c\x33\x0e\xb5\x28\xea\xb0\xd5\xa1\x5a\xa2\x30\xdc\xe6\xc3\xee\xf1\x2d\xa3\xed\x70\x97\x9f\x47\x15\xda\x6d\x4c\xe0\xfc\xbc\x33\x2f\x34\xeb\xf4\x5b\x71\xfd\xed\xde\x74\x46\x2a\x1f\xe2\x0c\x8a\x5b\x2c\x50\xec\xe2\xab\x2f\x84\xf8\xd5\x63\x9a\xc1\x3d\xe2\x04\x33\x43\x09\x13\xe3\x63\x74\xaa\x7b\x22\x4a\x19\x59\xa2\xe7\x42\x86\x87\xe3\x58\x4e\xe1\x9b\x64\x78\xf0\x72\x29\xfc\x81\x7d\xaf\x85\x9c\xc4\x3e\xef\x24\x7f\x59\xd1\x7f\xfb\xcc\x3f\xa7\xcf\x9c\x6c\xcb\x97\x1f\x81\xdf\x6a\x3b\x7f\x04\x00\x00\xff\xff\x5c\xcf\xf7\x7d\x5f\x10\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 4191, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0xc, 0x71, 0x10, 0x61, 0x53, 0x37, 0x34, 0x23, 0x6b, 0xe, 0xf0, 0x1c, 0x34, 0xd2, 0x5a, 0x81, 0x13, 0x8c, 0x31, 0x33, 0xc4, 0x59, 0x6c, 0xd5, 0x82, 0xe, 0x23, 0x4a, 0xe2, 0x59, 0x21}}
	return a, nil
}

var _svcServerRunGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xdc\x36\x10\x3d\x93\xbf\x62\x2a\xe4\xa0\x2d\xd6\xd4\xa1\xb7\x45\xf7\xd0\x3a\x41\x63\x20\x76\x16\xeb\x05\x7a\x2c\xb8\xd2\x98\x62\xad\x25\x85\x21\x25\x35\x15\xf4\xdf\x0b\x52\x5f\x6b\xc7\x09\x9a\x93\xa0\xf9\x7c\x8f\xf3\x66\xb2\x0c\x6e\x6d\x81\xa0\xd0\x20\x49\x8f\x05\x9c\xbf\x80\xa7\xc6\x39\x01\xef\x3f\xc3\xc3\xe7\x13\x7c\x78\x7f\x77\x12\x3c\xcb\xe0\x88\xd4\x18\xa3\x8d\x1a\x03\xa0\xd3\x55\x05\xb6\x45\xea\x48\x7b\x04\x5f\x6a\x07\x4f\xba\x42\xc1\x79\x2d\xf3\x67\xa9\x10\x1c\x52\x8b\xc4\xb9\xbe\xd4\x96\x3c\xa4\x9c\x25\x95\x55\x09\xe7\x2c\xcb\xe0\x97\x02\x0e\x92\xfc\x17\xce\x12\x65\xad\xaa\x50\x28\x5b\x49\xa3\x84\x25\x95\x29\xaa\xf3\x84\xb3\x3c\x7c\x21\x51\xda\x23\x8a\xdc\x5e\xb2\x7f\xcb\xe6\x2c\x2d\xde\x28\x9b\xfd\x6d\xa9\x90\x26\x46\x66\x63\xa3\x84\x03\xc0\xf7\xa3\x4b\xef\xeb\xa9\xff\x29\x00\x7e\x44\x6a\x75\x8e\x9c\xd5\x67\x48\xfa\x5e\x1c\x7e\xbf\x8b\x58\x0f\xd2\x97\x70\x33\x0c\x09\x67\xc1\xfc\xd2\x08\x99\x6b\xf3\x37\x3d\xc1\x91\x79\x92\xc6\x05\xeb\x5f\x63\xb7\x37\x2b\x94\xd2\x14\x15\x92\x4b\xf8\x86\xf3\xa7\xc6\xe4\xf0\x80\xdd\x07\x53\xd4\x56\x1b\xef\x52\x37\xe2\x82\xfa\x2c\xfa\x5e\x4c\x28\xc5\x83\xbc\xe0\x30\x3c\x46\xb2\x1b\x70\x6d\x2e\x96\x0c\xe8\x23\xa9\x3f\x49\xd6\x33\x29\xe8\xb4\x2f\xe1\xa2\x8b\xa2\xc2\x4e\x12\x3a\x01\x8f\x88\x30\x77\xce\xae\x3d\xca\x72\x36\xf7\xdc\x2f\x21\x22\x94\x9b\xaa\xcd\x90\x36\xe3\xeb\xcd\x8d\xa1\xb0\x17\xa9\x8d\xe0\xac\x95\x14\x26\xdc\xf7\x24\x8d\x42\x78\xa7\x61\xb7\x87\x05\xfa\x3d\xfa\xd2\x16\x2e\x90\xe7\x8c\xf5\xfd\xc9\x7e\xb2\x1d\x12\xbc\xd3\x13\xab\xa5\xe0\x3e\x12\xbb\x97\xcf\xd8\xf7\x5f\x79\x57\x14\xac\xef\xd1\x14\xa1\x5a\x40\x84\xcb\x3b\xec\xf6\x2f\x1f\xa6\xff\xdf\x90\xbe\x6a\xb6\x0b\x72\xfa\x0e\xd4\xed\x15\x88\x81\xaf\xef\xef\xb0\xc2\x3c\x2c\xd3\x3a\x9d\x1f\x1c\xc5\x4a\xe7\xd5\x30\x56\x85\x2c\x21\x81\x3e\xa1\x6f\xc8\xc0\x62\xe3\x03\x8f\x2b\xdb\x18\x70\x5e\x92\x77\x20\xc1\x60\x07\x41\x90\xd3\x56\x6e\x41\x1d\x0f\xb7\xcb\x8f\x34\x05\x48\x28\xf0\xdc\xa8\xc9\x36\x62\xf6\x25\x86\x4a\xb5\x74\x0e\x0b\xc8\xad\x79\xd2\x2a\x06\x57\x56\x29\xa4\x51\xba\xc7\xc6\xa4\x9b\xa0\xc0\x59\x42\xbb\x2b\xd8\x0f\xd8\xcd\x12\xda\xbc\x1a\xd4\x5b\x92\x9f\xf4\x75\x8f\x79\x29\x8d\xce\x65\xb5\x2a\x0c\x89\xf2\x90\x76\x91\xcf\x98\x06\x37\x20\x91\xa5\x29\xe3\xce\x78\x24\x6a\x6a\x3f\xb7\x16\xd1\xac\xec\x0a\x65\x09\xf9\x38\x5a\xd2\x50\x71\x4a\xff\x78\x3a\x1d\x60\x59\x5d\xc1\x99\xb2\x10\xc8\xa5\x9b\x3e\x9e\x15\x56\x86\xd6\x2f\x77\x3b\xaa\x34\x24\x2e\xf5\xd6\xa1\xc4\x9c\x50\x7f\x1f\x23\x3f\x69\xe7\xd1\xfc\x66\x8a\xb8\xbd\x69\xb2\xca\xea\xd5\x76\x27\xdb\x72\x4c\x1e\xd2\x09\x59\x9c\xd3\x37\x90\x31\x46\xa8\x42\x69\xda\xed\x47\xa3\x83\x9f\xc3\x49\x14\xf3\x95\x08\x31\xcc\x51\x3b\x2f\x46\x80\xfc\xc7\xf1\x70\x3b\xfa\xaf\x11\x33\xc6\xea\xb3\x38\x4e\xf5\xbe\x71\x76\x52\xb7\x05\x47\x6d\x88\x0e\x5b\x13\x09\xc6\x2b\xfd\x23\x0c\x67\xcc\x1b\xce\x16\x96\xc7\xc6\xfc\xc4\x59\x65\x95\x38\x90\x36\xbe\x32\x69\x32\xdf\x31\xfc\x47\xfb\x6d\xb2\x85\x5f\x6f\xc6\x79\x0d\x9c\xff\x17\x00\x00\xff\xff\x11\x3f\xae\xe8\xb9\x06\x00\x00")

func svcServerRunGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServerRunGotemplate,
		"svc/server/run.gotemplate",
	)
}

func svcServerRunGotemplate() (*asset, error) {
	bytes, err := svcServerRunGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/server/run.gotemplate", size: 1721, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0x1, 0x18, 0xef, 0xcb, 0xab, 0x7, 0xf5, 0xa, 0xe7, 0xd2, 0x7, 0xde, 0x81, 0x64, 0x7a, 0xf7, 0x63, 0x21, 0x11, 0xa6, 0x4a, 0x2, 0x15, 0x50, 0x26, 0x44, 0x73, 0x18, 0xba, 0xde, 0xc2}}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xdf\x6f\xe2\x38\x10\x7e\x8e\xff\x8a\x39\xb4\x3a\x91\x15\x38\xef\x95\x78\xb9\xb6\xd7\xab\x74\xdb\x22\x8e\xf7\x95\x49\x86\xe0\x6b\x62\xbb\xb6\x43\x97\xb5\xf2\xbf\xaf\xec\xfc\xa4\xb0\xc0\x13\xc4\xfe\x66\xfc\xcd\xf7\xcd\x4c\x92\xc0\xbd\xcc\x10\x72\x14\xa8\x99\xc5\x0c\x36\x07\xb0\xba\x32\x86\xc2\xc3\x2b\xbc\xbc\xae\xe1\xf1\xe1\x79\x4d\x49\x92\xc0\x0a\x75\x25\x04\x17\x79\x03\x80\x0f\x5e\x14\x20\xf7\xa8\x3f\x34\xb7\x08\x76\xc7\x0d\x6c\x79\x81\x94\x10\xc5\xd2\x37\x96\x23\x98\x7d\x4a\x7c\xe8\xba\xbb\x03\xa5\xe5\x9e\x67\x68\xc0\xa0\xde\xa3\x9e\x1b\x9e\x21\x6c\xb8\xc8\xb8\xc8\x0d\x6c\xa5\x06\xbb\x43\xc8\x57\xcb\x7b\xb0\x9a\x09\xa3\xa4\xb6\xe1\xf5\x67\x0b\x95\xe5\x05\xff\x89\x26\x40\xfa\xdb\x24\xd7\x2a\xa5\xff\x85\x74\x94\x10\x5e\xfa\x43\x98\x92\x68\x92\x4a\x61\xf1\x87\x9d\x90\x68\x92\x73\x8b\x48\x53\x59\x26\x3f\x77\xd5\x86\x49\x9c\xe7\x32\xf9\x5f\xea\x8c\x89\x24\x97\xf3\x37\x6e\x93\x3e\xe1\x84\x44\x3e\x65\xff\x0d\x3e\x7a\x57\x6d\x42\x78\x0b\x3e\x0a\x08\x0c\x26\x84\x44\x5d\xa5\x9e\x0c\x4f\x91\x44\x6a\x03\x13\xe7\xe8\xf2\xaf\xe7\xc0\x6a\xc9\xec\x0e\xe6\x75\x3d\x21\x71\x90\xe5\x1b\x7b\xc3\xa7\xd5\xf2\xbe\x21\x0f\x25\x7b\x43\x03\x0c\x0c\x5a\x90\x5b\x40\x91\x29\xc9\x85\x35\xc0\xf6\x8c\x17\x6c\x53\x20\x30\x7f\x1f\xd4\x71\x8e\xb6\xcf\xd0\x17\x56\x62\x5d\x77\x0a\x6c\x2b\x91\x7e\xca\x3c\x1d\x52\x3d\x76\xff\x66\x20\x95\xe5\x52\x18\xa0\x94\x1e\xd5\xdb\x6a\xf9\x1a\xae\x63\x50\x1b\xfa\x9b\xb7\xc0\x91\xc8\x8c\xb0\x06\xee\x16\x43\x96\x07\xdc\xb2\xaa\xb0\x4f\x5a\xa5\xe3\x84\x66\x1a\x7f\x8e\x5a\x00\x53\x0a\x45\x36\x3d\x3a\xee\x09\x52\x4a\x63\x42\x22\x8d\xb6\xd2\x02\xfe\xcc\xfb\x84\x2e\x28\xee\x1c\xac\xe5\xbf\xf2\x03\x35\x1c\xb1\x84\xba\x26\x91\x73\x9a\x89\x1c\xe1\x0b\x87\xbb\xc5\x70\xff\x0d\xed\x4e\x66\xc6\x23\x22\xe7\xba\xf0\x2f\xbc\x2d\xef\x0e\x8e\x05\x79\xc1\x8f\x56\x48\x12\x45\x51\x2f\x26\x75\xae\x0f\xe9\x74\x9d\x79\xc4\x03\xa6\x32\x0b\xfa\x8f\x10\x2b\x7c\xaf\xd0\x34\x80\x47\x71\x16\x60\x94\x14\x06\x03\xe2\x48\x0a\x4a\xa9\x3f\x8c\x67\xbe\xa0\xb9\x6f\x0c\xcf\xbc\x26\x75\xe8\xa2\x41\x10\xe0\xa5\x2a\xb0\x44\x6f\xb4\x9f\x11\xe7\x9e\x64\x90\xe2\xbc\x7d\x5c\x58\xd4\x5b\x96\x22\xb1\x07\x85\xe3\x3c\xc6\xea\x2a\xb5\xe0\xc8\x75\xfd\xce\xc8\x07\xf0\x49\xbf\x7f\x98\xc8\x0a\xd4\x64\x20\xdf\x30\x6f\xd3\x84\xb1\x1f\xbd\x6e\xe5\x50\xc8\xed\x35\x5c\xa5\x1a\x06\x63\x6a\xe0\xeb\xf0\x54\x3c\xa4\xef\xd9\x4f\x53\xfb\x03\xda\xd5\x41\xef\x9b\xdf\x19\x68\x7c\x87\xaf\x61\x14\x06\x7c\xeb\xe8\xfa\xa0\x3a\x52\x31\x4c\x4f\x41\x8d\xab\x23\xd4\x0c\x50\x6b\xe9\x1f\x27\xd1\x77\x9f\x5a\x85\x13\x4f\xdb\xf7\xd4\x89\x9e\xcd\x40\xfa\x6e\xf1\xdc\x02\x97\x98\x44\x7c\x1b\x82\xfe\x58\x80\xe0\x85\x4f\xd5\x4d\x88\xe0\x45\xc8\xe7\x3b\xa4\x3b\xd3\xa8\xe8\x2d\xd4\xe2\x99\x0f\x27\x35\x71\xae\x31\xca\xdb\xd4\x4a\xdd\x74\xf5\x75\x9d\x93\x04\x2e\x0d\x00\x70\xbf\xc3\x3e\xad\xef\x26\xa0\x45\xfc\xed\x8d\xb2\x3b\x66\xbd\x0d\x7b\xd4\x7e\x03\x86\x46\x6f\xf6\xde\x69\xbf\xe9\x36\xb3\x95\xc0\xa0\x32\xa8\xe7\x99\x2c\x19\x17\x97\xc0\x14\x96\x9a\x97\x4c\xf3\xe2\xe0\x43\xb6\x55\x01\x5c\x84\xe5\x3b\x5a\xa3\x97\xea\x98\x7e\x3f\xed\x12\x5f\xcb\x0a\xdf\x87\xae\x74\xbe\x25\x46\x5f\x63\xeb\x7d\x4b\xdd\x2d\xba\x98\x73\xf6\x9c\xb4\xd7\xc8\xcf\xf7\x0b\x4e\x35\xeb\xe5\x26\xa7\x2e\x6e\xa2\xb3\x56\x35\x11\x1d\xe4\x77\x5e\x5d\x77\xa1\x7d\x22\x78\x76\xc1\x59\x55\x1c\x6e\xb2\xea\x62\x21\xe7\xbc\xea\x19\xdc\x68\x96\x51\x5e\xc5\x2e\xea\xb6\x69\x1a\xf9\x65\xd4\x89\x61\xbf\x02\x00\x00\xff\xff\x41\x2a\x2c\x4f\x7d\x09\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 2429, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0xac, 0x4a, 0xb, 0xa7, 0xf3, 0x80, 0x52, 0xb0, 0x7a, 0xd5, 0xed, 0xf3, 0x92, 0xd3, 0x4f, 0xd1, 0xd8, 0xab, 0xba, 0x56, 0x2e, 0x8, 0x8f, 0xb6, 0x76, 0x4c, 0x14, 0xc2, 0xd5, 0x60, 0x87}}
	return a, nil
}

var _svcTransport_httpPermissionsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\x55\x7a\x26\xd1\x0e\xe3\x00\x86\x60\xad\x46\xa5\xa4\xfd\x7a\x21\xec\xee\xeb\x9d\x13\x2d\x22\xa4\x36\xc1\xdf\x08\x56\xa9\x6a\xd7\x09\x8e\xaf\x30\x3c\xd7\x68\xe6\x58\x0f\xa0\x31\xe4\x69\x77\x86\xc4\xac\x46\xbb\x39\x15\xdb\x84\x12\x8f\xf1\x07\x00\x00\xff\xff\xbc\x01\x88\x46\x48\x00\x00\x00")

func svcTransport_httpPermissionsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpPermissionsGotemplate,
		"svc/transport_http/permissions.gotemplate",
	)
}

func svcTransport_httpPermissionsGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpPermissionsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http/permissions.gotemplate", size: 72, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8, 0xb2, 0xf5, 0xda, 0x6a, 0x43, 0x6e, 0x20, 0xcf, 0x37, 0x35, 0xf7, 0xb8, 0x0, 0x94, 0xb6, 0xf0, 0xc, 0xb8, 0x7b, 0x1a, 0xe8, 0x1d, 0x36, 0xd, 0x8b, 0x9b, 0x84, 0xe9, 0x31, 0xfe, 0x5}}
	return a, nil
}

var _svcTransport_httpTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\x55\x7a\x26\xd1\x0e\xe3\x00\x86\x60\xad\x46\xa5\xa4\xfd\x7a\x21\xec\xee\xeb\x9d\x13\x2d\x22\xa4\x36\xc1\xdf\x08\x56\xa9\x6a\xd7\x09\x8e\xaf\x30\x3c\xd7\x68\xe6\x58\x0f\xa0\x31\xe4\x69\x77\x86\xc4\xac\x46\xbb\x39\x15\xdb\x84\x12\x8f\xf1\x07\x00\x00\xff\xff\xbc\x01\x88\x46\x48\x00\x00\x00")

func svcTransport_httpTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpTransport_httpGotemplate,
		"svc/transport_http/transport_http.gotemplate",
	)
}

func svcTransport_httpTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http/transport_http.gotemplate", size: 72, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8, 0xb2, 0xf5, 0xda, 0x6a, 0x43, 0x6e, 0x20, 0xcf, 0x37, 0x35, 0xf7, 0xb8, 0x0, 0x94, 0xb6, 0xf0, 0xc, 0xb8, 0x7b, 0x1a, 0xe8, 0x1d, 0x36, 0xd, 0x8b, 0x9b, 0x84, 0xe9, 0x31, 0xfe, 0x5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/NAME/main.gotemplate":                     cmdNameMainGotemplate,
	"handlers/handlers.gotemplate":                 handlersHandlersGotemplate,
	"handlers/hooks.gotemplate":                    handlersHooksGotemplate,
	"handlers/middlewares.gotemplate":              handlersMiddlewaresGotemplate,
	"svc/client/grpc/client.gotemplate":            svcClientGrpcClientGotemplate,
	"svc/client/http/client.gotemplate":            svcClientHttpClientGotemplate,
	"svc/endpoints.gotemplate":                     svcEndpointsGotemplate,
	"svc/server/run.gotemplate":                    svcServerRunGotemplate,
	"svc/transport_grpc.gotemplate":                svcTransport_grpcGotemplate,
	"svc/transport_http/permissions.gotemplate":    svcTransport_httpPermissionsGotemplate,
	"svc/transport_http/transport_http.gotemplate": svcTransport_httpTransport_httpGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"NAME": {nil, map[string]*bintree{
			"main.gotemplate": {cmdNameMainGotemplate, map[string]*bintree{}},
		}},
	}},
	"handlers": {nil, map[string]*bintree{
		"handlers.gotemplate": {handlersHandlersGotemplate, map[string]*bintree{}},
		"hooks.gotemplate": {handlersHooksGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate": {handlersMiddlewaresGotemplate, map[string]*bintree{}},
	}},
	"svc": {nil, map[string]*bintree{
		"client": {nil, map[string]*bintree{
			"grpc": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"endpoints.gotemplate": {svcEndpointsGotemplate, map[string]*bintree{}},
		"server": {nil, map[string]*bintree{
			"run.gotemplate": {svcServerRunGotemplate, map[string]*bintree{}},
		}},
		"transport_grpc.gotemplate": {svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http": {nil, map[string]*bintree{
			"permissions.gotemplate": {svcTransport_httpPermissionsGotemplate, map[string]*bintree{}},
			"transport_http.gotemplate": {svcTransport_httpTransport_httpGotemplate, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
