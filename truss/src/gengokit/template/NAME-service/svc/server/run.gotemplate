// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.

package server

import (
	"log"

	// 3d Party
	"google.golang.org/grpc"
	cgrpc "gitee.com/zhubaoe-go/jordan/grpc/server"
    "gitee.com/zhubaoe-go/jordan/http"

	// This Service
	pb "{{.PBImportPath -}}"
	"{{.ImportPath -}} /svc"
	"{{.ImportPath -}}/svc/transport_http"
	"{{.ImportPath -}} /handlers"
)

func NewEndpoints(service pb.{{.Service.Name}}Server) svc.Endpoints {
	// Wrap Service with middlewares. See handlers/middlewares.go
	service = handlers.WrapService(service)

	// Endpoint domain.
	var (
	{{range $i := .Service.Methods -}}
		{{ToLower $i.Name}}Endpoint = svc.Make{{$i.Name}}Endpoint(service)
	{{end}}
	)

	endpoints := svc.Endpoints{
	{{range $i := .Service.Methods -}}
		{{$i.Name}}Endpoint:    {{ToLower $i.Name}}Endpoint,
	{{end}}
	}

	// Wrap selected Endpoints with middlewares. See handlers/middlewares.go
	endpoints = handlers.WrapEndpoints(endpoints)

	return endpoints
}

// Run starts a new http server, gRPC server, and a debug server with the
// passed config and logger
func Run() {
	service := handlers.NewService()
	endpoints := NewEndpoints(service)

	// Mechanical domain.
	errc := make(chan error)

	// Interrupt handler.
	// go handlers.InterruptHandler(errc)

	// HTTP transport.
	go func(){
    	h := transport_http.MakeHTTPHandler(endpoints)
    	errc=http.ListenAndServe("{{ToLower .Service.Name}}",h)
    }()

	// gRPC transport.
	go func(){
		register:= func(s *grpc.Server) {
			srv := svc.MakeGRPCServer(endpoints)
			pb.Register{{.Service.Name}}Server(s, srv)
		}
		errc=cgrpc.ListenAndServe("{{ToLower .Service.Name}}",register)
	}()

	// Run!
	log.Println("Service exit,", <-errc)
}

