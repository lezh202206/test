// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.

// Package grpc provides a gRPC client for the {{.Service.Name}} service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"sync"

	"gitee.com/zhubaoe-go/jordan/config"
	"gitee.com/zhubaoe-go/jordan/go-kit/transport"
	"gitee.com/zhubaoe-go/jordan/grpc/client"
	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	"{{.ImportPath -}} /svc"
	pb "{{.PBImportPath -}}"
)

var defaultConn *grpc.ClientConn
var connMutex sync.Mutex

type GrpcClient struct {
	conn   *grpc.ClientConn
	server pb.{{.Service.Name}}Server
	err    error
}

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(ctx context.Context, options ...ClientOption) *GrpcClient {
	g := &GrpcClient{}
	var conn *grpc.ClientConn
    var err error

	if config.Gateway().GrpcKeepalive {
		// 使用双重锁
		if defaultConn == nil {
			connMutex.Lock()
			defer connMutex.Unlock()
			if defaultConn == nil {
				conn, err = client.New(ctx,"{{ToLower .Service.Name}}")
				if err != nil {
					g.err = err
					return g
				}
				defaultConn = conn
			}
		}

		conn=defaultConn
	}else {
		conn, err = client.New(ctx,"{{ToLower .Service.Name}}")
		if err != nil {
			g.err = err
			return g
		}
	}
    g.conn = conn

	var cc clientConfig
	for _, f := range options {
		err := f(&cc)
		if err != nil {
			g.err = errors.Wrap(err, "cannot apply option")
            return g
		}
	}

	clientOptions:=transport.DefaultGrpcClientOptions()
	// 传入指定的contextValue
	clientOptions=append(clientOptions,grpctransport.ClientBefore(transport.ContextValuesToGRPCMetadata(cc.headers)))

	{{- with $te := .}}
		{{- with $pkgName := $te.PackageName}}
			{{- range $i := $te.Service.Methods}}
				var {{ToLower $i.Name}}Endpoint endpoint.Endpoint
				{
					{{ToLower $i.Name}}Endpoint = grpctransport.NewClient(
						conn,
						"{{$pkgName}}.{{$te.Service.Name}}",
						"{{$i.Name}}",
						EncodeGRPC{{$i.Name}}Request,
						DecodeGRPC{{$i.Name}}Response,
						pb.{{GoName $i.ResponseType.Name}}{},
						clientOptions...,
					).Endpoint()
				}
			{{end}}
		{{end}}
	{{end}}

	g.server =  svc.Endpoints{
	{{range $i := .Service.Methods -}}
		{{$i.Name}}Endpoint:    {{ToLower $i.Name}}Endpoint,
	{{end}}
	}
	return g
}

func (g *GrpcClient) Server() pb.{{.Service.Name}}Server {
	return g.server
}

func (g *GrpcClient) Err() error {
	return g.err
}

func (g *GrpcClient) Close() {
	if !config.Gateway().GrpcKeepalive {
		if g.conn != nil {
			g.conn.Close()
		}
	}
}

// GRPC Client Decode
{{range $i := .Service.Methods}}
// DecodeGRPC{{$i.Name}}Response is a transport/grpc.DecodeResponseFunc that converts a
// gRPC {{ToLower $i.Name}} reply to a user-domain {{ToLower $i.Name}} response. Primarily useful in a client.
func DecodeGRPC{{$i.Name}}Response(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.{{GoName $i.ResponseType.Name}})
	return reply, nil
}
{{end}}

// GRPC Client Encode
{{range $i := .Service.Methods}}
// EncodeGRPC{{$i.Name}}Request is a transport/grpc.EncodeRequestFunc that converts a
// user-domain {{ToLower $i.Name}} request to a gRPC {{ToLower $i.Name}} request. Primarily useful in a client.
func EncodeGRPC{{$i.Name}}Request(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.{{GoName $i.RequestType.Name}})
	return req, nil
}
{{end}}


type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}
